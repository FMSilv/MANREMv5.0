package scheduling;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/*import com.orsonpdf.font.TableInfo;*/
import java.io.IOException;
import javax.swing.JFrame;
import java.util.ArrayList;
import java.util.List;
import producing.Producer;
import static scheduling.AddGenerator.InfoSheet_h;
//import static scheduling.AddGenerator.InfoSheet_t;
import static scheduling.AddGenerator.InfoSheet_w;
import static scheduling.AddGenerator.prov_name;

/**
 *
 * @author Af
 */

public class AddGenerator2 extends JFrame {
 
    private PreliminarInfo geninfwindow;
    private ProducerScheduling SelectWindow;
    private static ErrorMessage errormess;
    public static List<String> provisString;
    public static List<String> DatatoUpdate;
    public static boolean UP;
    public static int ROW;
    public static int row_to_remove;
    private Producer generatorData;
    
    /**
     * Creates new form AddGenerator2
     */
    public AddGenerator2(String name) {
        prov_name=name;
        initComponents();
        Refreshvalues();
        this.setTitle("Add Generator");
        this.setResizable(false);
        this.setAlwaysOnTop(true);
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        UP = false;
//        prov_name=generatorData.getName();
        Name1.setText(prov_name);
        Name1.setEnabled(false);

      
    }
     
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        Name1 = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        AddButton = new javax.swing.JButton();
        RemoveButton = new javax.swing.JButton();
        UpdateButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableInfos = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "GenCo's Info", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

        jLabel1.setText("Name:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(Name1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(Name1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Technology Portfolio", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

        AddButton.setText("Add");
        AddButton.setPreferredSize(new java.awt.Dimension(71, 36));
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });

        RemoveButton.setText("Remove");
        RemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveButtonActionPerformed(evt);
            }
        });

        UpdateButton.setText("Update");
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });

        TableInfos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Technology", "Fuel", "Max Power (MW)", "Min Power (MW)", "Marginal Cost (USD/MW)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableInfos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane2.setViewportView(TableInfos);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(UpdateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(RemoveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(AddButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(AddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RemoveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(UpdateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))))
        );

        jButton1.setText("Cancel");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton5.setText("Save");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton5)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(23, 23, 23))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

        
//CANCEL BUTTON
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    
    //SAVE BUTTON
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

        this.dispose();
        //SelectWindow = new UnitSelection();
        //SelectWindow.setVisible(true);
    }//GEN-LAST:event_jButton5ActionPerformed

    
    //ADD BUTTON
    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButtonActionPerformed

        geninfwindow = new PreliminarInfo();
        geninfwindow.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_AddButtonActionPerformed

    
    //UPDATE BUTTON
    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateButtonActionPerformed
         UP = true; 
 try{  

     int row = TableInfos.getSelectedRow();
     String ID = TableInfos.getValueAt(row, 0).toString();
    
    
     
     if(TableInfos.getValueAt(row, 1).equals("Thermal")){
         
         Update_thermal(ID);  
         geninfwindow = new PreliminarInfo();
         geninfwindow.setVisible(true);
         this.dispose();   
         
     }else if(TableInfos.getValueAt(row, 1).equals("Hydro")){
        
        Update_hydro(ID);   
        geninfwindow = new PreliminarInfo();
        geninfwindow.setVisible(true);
        this.dispose();
        
     }else if(TableInfos.getValueAt(row, 1).equals("Wind")){
     
        Update_wind(ID);
        geninfwindow = new PreliminarInfo();
        geninfwindow.setVisible(true);
        this.dispose();
     }


}catch(ArrayIndexOutOfBoundsException k){
        errormess = new ErrorMessage("","No item selected for update!");
        errormess.setVisible(true);
}

    }//GEN-LAST:event_UpdateButtonActionPerformed

    //REMOVE BUTTON
    private void RemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveButtonActionPerformed

        DeletefromTable();
    }//GEN-LAST:event_RemoveButtonActionPerformed


public static void DeletefromTable(){
try{
    for(int i = 0; i< AddGenerator.InfoSheet_t.size();i++){
        if(AddGenerator.InfoSheet_t.get(i).getID().equals(TableInfos.getValueAt(TableInfos.getSelectedRow(), 0))){
            AddGenerator.InfoSheet_t.remove(i);
        }
    }
    for(int i = 0; i< AddGenerator.InfoSheet_h.size();i++){
        if(AddGenerator.InfoSheet_h.get(i).getID().equals(TableInfos.getValueAt(TableInfos.getSelectedRow(), 0))){
            AddGenerator.InfoSheet_h.remove(i);
        }
    }
    for(int i = 0; i< AddGenerator.InfoSheet_w.size();i++){
        if(AddGenerator.InfoSheet_w.get(i).getID().equals(TableInfos.getValueAt(TableInfos.getSelectedRow(), 0))){
            AddGenerator.InfoSheet_w.remove(i);
        }
    }
       
        Refreshvalues();

}catch(ArrayIndexOutOfBoundsException k){
        errormess = new ErrorMessage("","No item found for removal!");
        errormess.setVisible(true);
}



}
 

public static void Refreshvalues ()
    {       
        int nrows = 0; 
        for(int i = 0; i < AddGenerator.InfoSheet_t.size(); i++){
            if(AddGenerator.InfoSheet_t.get(i).getGENCO_name() == AddGenerator.prov_name){
            nrows++;
            }
        }
        
        int nh = 0; 
        for(int i = 0; i < AddGenerator.InfoSheet_h.size(); i++){
            if(AddGenerator.InfoSheet_h.get(i).getGENCO_name() == AddGenerator.prov_name){
            nrows++;
            }
        }
        
        int nw = 0; 
        for(int i = 0; i < AddGenerator.InfoSheet_w.size(); i++){
            if(AddGenerator.InfoSheet_w.get(i).getGENCO_name() == AddGenerator.prov_name){
            nrows++;
            }
        }
        
        String data[][] = new String[nrows][7];
        int dataindex = 0;
        for (int k=0; k<AddGenerator.InfoSheet_t.size(); k++){
            if(AddGenerator.InfoSheet_t.get(k).getGENCO_name() == AddGenerator.prov_name){
                data[dataindex][0] = AddGenerator.InfoSheet_t.get(k).ID;
                data[dataindex][1] = AddGenerator.InfoSheet_t.get(k).Tech;
                data[dataindex][2] = AddGenerator.InfoSheet_t.get(k).Fuel;
                data[dataindex][3] = String.valueOf(AddGenerator.InfoSheet_t.get(k).MinP);          
                data[dataindex][4] = String.valueOf(AddGenerator.InfoSheet_t.get(k).MaxP);
                data[dataindex][5] = String.valueOf(AddGenerator.InfoSheet_t.get(k).VCost);    
                dataindex++;
            }}
                 
         for (int k=0; k<AddGenerator.InfoSheet_h.size(); k++){
            if(AddGenerator.InfoSheet_h.get(k).getGENCO_name() == AddGenerator.prov_name){
                data[dataindex][0] = AddGenerator.InfoSheet_h.get(k).ID;
                data[dataindex][1] = AddGenerator.InfoSheet_h.get(k).Tech;
                data[dataindex][2] = AddGenerator.InfoSheet_h.get(k).Fuel;
                data[dataindex][3] = null;
                data[dataindex][4] = String.valueOf(AddGenerator.InfoSheet_h.get(k).Pi);
                data[dataindex][5] = String.valueOf(AddGenerator.InfoSheet_h.get(k).VCost);
                dataindex++;
            }}
                        
          for (int k=0; k<AddGenerator.InfoSheet_w.size(); k++){
            if(AddGenerator.InfoSheet_w.get(k).getGENCO_name() == AddGenerator.prov_name){
                data[dataindex][0] = AddGenerator.InfoSheet_w.get(k).ID;
                data[dataindex][1] = AddGenerator.InfoSheet_w.get(k).Tech;
                data[dataindex][2] = AddGenerator.InfoSheet_w.get(k).Fuel;
                data[dataindex][3] = String.valueOf(AddGenerator.InfoSheet_w.get(k).MinP);
                data[dataindex][4] = String.valueOf(AddGenerator.InfoSheet_w.get(k).MaxP);
                data[dataindex][5] = String.valueOf(AddGenerator.InfoSheet_w.get(k).VCost);
                dataindex++;
            }}
            
          TableInfos.setModel(new javax.swing.table.DefaultTableModel(
            data,
            new String [] {
               "ID", "Technology", "Fuel",  "Min Power (MW)","Max Power (MW)", "MCost (USD/MW)"
            }
        ));
      
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddGenerator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    public static javax.swing.JTextField Name1;
    private javax.swing.JButton RemoveButton;
    public static javax.swing.JTable TableInfos;
    public javax.swing.JButton UpdateButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables


    public void Update_thermal(String ID){
        DatatoUpdate = new ArrayList<String>();
        
        for(int index = 0; index<AddGenerator.InfoSheet_t.size(); index++){
        if(AddGenerator.InfoSheet_t.get(index).getID().equals(ID)) {   
        
        DatatoUpdate.add(AddGenerator.InfoSheet_t.get(index).getID());
        DatatoUpdate.add(AddGenerator.InfoSheet_t.get(index).getTech());
        DatatoUpdate.add(AddGenerator.InfoSheet_t.get(index).getFuel());
        DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_t.get(index).getMinP()));
        DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_t.get(index).getMaxP()));
        DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_t.get(index).getRU()));
        DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_t.get(index).getRD()));
        DatatoUpdate.add(String.valueOf((int)AddGenerator.InfoSheet_t.get(index).getMinOn()));
        DatatoUpdate.add(String.valueOf((int)AddGenerator.InfoSheet_t.get(index).getMinOff()));
        DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_t.get(index).getPrevProd()));
        DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_t.get(index).getFCost()));
        DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_t.get(index).getVCost()));
        DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_t.get(index).getSUcost()));
        DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_t.get(index).getSDcost()));
        DatatoUpdate.add(String.valueOf((int)AddGenerator.InfoSheet_t.get(index).getInitStatus()));
        DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_t.get(index).getFuelCfixed()));
        DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_t.get(index).getFuelCvar()));
        DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_t.get(index).EmCO2));
        DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_t.get(index).EmNO2));
        
        row_to_remove = index;
    }
        }
    }

    public void Update_hydro(String ID){
        DatatoUpdate = new ArrayList<String>();
         
    for(int index = 0; index < AddGenerator.InfoSheet_h.size(); index++){
        if(AddGenerator.InfoSheet_h.get(index).getID().equals(ID)){
    
        DatatoUpdate.add(AddGenerator.InfoSheet_h.get(index).getID());
        DatatoUpdate.add(AddGenerator.InfoSheet_h.get(index).getTech());
        DatatoUpdate.add(AddGenerator.InfoSheet_h.get(index).getFuel());
        DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_h.get(index).getRU()));
        DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_h.get(index).getRD()));
        DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_h.get(index).getMinReserve()));
        DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_h.get(index).getMaxReserve()));
        DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_h.get(index).getInitReserve()));
        DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_h.get(index).getMinDisch()));
        DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_h.get(index).getMaxDisch()));                            
        DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_h.get(index).getVCost()));
        DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_h.get(index).getPl1()));
        DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_h.get(index).getPl2()));
        DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_h.get(index).getPl3()));
        DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_h.get(index).getPl4()));
        DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_h.get(index).getUl()));
        DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_h.get(index).getP01()));
        DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_h.get(index).getP02()));
        DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_h.get(index).getP03()));
        DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_h.get(index).getPi()));
        DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_h.get(index).getCurve()));
        DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_h.get(index).getStartupcost()));
        DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_h.get(index).getInflow()));
        DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_h.get(index).getMediumlevel()));
        DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_h.get(index).getUpperlevel()));
        DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_h.get(index).getFCost()));
        DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_h.get(index).getPrevProduction()));
        
        row_to_remove = index;
        }
    }
    }

    
    public void Update_wind(String ID){
    
        DatatoUpdate = new ArrayList<String>();
     
        for(int index = 0;  index<AddGenerator.InfoSheet_w.size(); index++){
            if(AddGenerator.InfoSheet_w.get(index).getID().equals(ID)){ 
                
    DatatoUpdate.add(AddGenerator.InfoSheet_w.get(index).getID());
    DatatoUpdate.add(AddGenerator.InfoSheet_w.get(index).getTech());
    DatatoUpdate.add(AddGenerator.InfoSheet_w.get(index).getFuel());
    DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_w.get(index).getMinP()));
    DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_w.get(index).getMaxP()));
    DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_w.get(index).getFCost()));
    DatatoUpdate.add(String.valueOf(AddGenerator.InfoSheet_w.get(index).getVCost()));
    
    row_to_remove = index;
            }
        }
    }
}



