/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package BilateralMarket;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.io.IOException;
import java.util.ArrayList;
import java.lang.Double;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import jxl.Cell;
import static scheduling.SchedulingOutput.BCOffers;
import static scheduling.SchedulingOutput.BCTransactions;
import scheduling.SchedulingOutput.Contract;
import scheduling.SchedulingOutput.Transactions;

/**
 *
 * @author AfonsoMCardoso
 */
public class MarketClearing extends javax.swing.JFrame {
    
    
    public MarketClearing() {
        initComponents();
        
        this.setTitle("Bilateral Contracts Market");
        this.setResizable(false);
        this.setAlwaysOnTop(true);
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
       
        
        //try{
 //       scheduling.Import_export.LoadBCOffers();  //Load BCOffers List
   //     }catch(IOException e){}
        addRandomBCProposals();
        
        Table_Offers();
        
        //clearingmarket();
        
        //Table_Cleared();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table_Offers = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        ClearMarket_button = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        Table_Cleared = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        non_matched_offers = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Submited Offers", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        Table_Offers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Company", "Identifier", "Order", "Period", "Volume (MW)", "Price (USD/MW)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(Table_Offers);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                .addContainerGap())
        );

        jButton1.setText("OK");

        ClearMarket_button.setText("Clear Market");
        ClearMarket_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearMarket_buttonActionPerformed(evt);
            }
        });

        jTabbedPane1.setEnabled(false);

        Table_Cleared.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Purchase Offer", "Sale Offer", "Order", "Volume (MW)", "Price (USD/MW)", "Transaction Value (USD)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(Table_Cleared);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Cleared Offers", jPanel3);

        non_matched_offers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Company", "Identifier", "Order", "Period", "Volume (MW)", "Price (USD/MW)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(non_matched_offers);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Non matched Offers", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTabbedPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(ClearMarket_button)))
                        .addGap(11, 11, 11))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(35, 35, 35))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ClearMarket_button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ClearMarket_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearMarket_buttonActionPerformed
        
        clearingmarket();
        
        Table_Cleared();
        
        Table_ResultingMarket();
        
        ClearMarket_button.setEnabled(false);
    }//GEN-LAST:event_ClearMarket_buttonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MarketClearing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MarketClearing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MarketClearing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MarketClearing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MarketClearing().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ClearMarket_button;
    private static javax.swing.JTable Table_Cleared;
    private static javax.swing.JTable Table_Offers;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private static javax.swing.JTable non_matched_offers;
    // End of variables declaration//GEN-END:variables


public static void Table_Offers (){       
         String Offers[][] = new String[BCOffers.size()][6];
    
            for (int k = 0; k < BCOffers.size(); k++){   
                Offers[k][0] = BCOffers.get(k).getGENCO_name();
                Offers[k][1] = BCOffers.get(k).getID();
                Offers[k][2] = BCOffers.get(k).getOrder();
                Offers[k][3] = BCOffers.get(k).getPeriod();          
                Offers[k][4] = String.valueOf(Math.round(BCOffers.get(k).getVolume()));
                Offers[k][5] = String.valueOf(BCOffers.get(k).getPrice()); 
                
            }
            
            Table_Offers.setModel(new javax.swing.table.DefaultTableModel(
                Offers,
                new String [] {
                    "Company", "Identifier", "Order",  "Period", "Volume (MW)", "Price (USD/MW)"
                }
            ));
     
}
          
      
public static void Table_Cleared (){       
         String ClearedMarket[][] = new String[BCTransactions.size()][5];
    
            for (int k = 0; k < BCTransactions.size(); k++){          
                ClearedMarket[k][0] = BCTransactions.get(k).getPurchaseOffer();
                ClearedMarket[k][1] = BCTransactions.get(k).getSaleOffer();
                ClearedMarket[k][2] = String.valueOf(Math.round(BCTransactions.get(k).getVolume()));
                ClearedMarket[k][3] = String.valueOf(BCTransactions.get(k).getPrice());          
                ClearedMarket[k][4] = String.valueOf(Math.round(BCTransactions.get(k).getTransactionCost())); 
                
            }
          
            Table_Cleared.setModel(new javax.swing.table.DefaultTableModel(
            ClearedMarket,
            new String [] {
               "Purchase Offer", "Sale Offer", "Volume (MW)",  "Price (USD/MW)", "Transaction Value (USD)",
            }
        ));
      System.out.print("BCsize: " + BCTransactions.size());
    }
     
public static void Table_ResultingMarket(){

         String nonMatched[][] = new String[BCOffers.size()][6];
    
            for (int k = 0; k < BCOffers.size(); k++){   
                nonMatched[k][0] = BCOffers.get(k).getGENCO_name();
                nonMatched[k][1] = BCOffers.get(k).getID();
                nonMatched[k][2] = BCOffers.get(k).getOrder();
                nonMatched[k][3] = BCOffers.get(k).getPeriod();          
                nonMatched[k][4] = String.valueOf(Math.round(BCOffers.get(k).getVolume()));
                nonMatched[k][5] = String.valueOf(BCOffers.get(k).getPrice()); 
                
            }
            
            non_matched_offers.setModel(new javax.swing.table.DefaultTableModel(
                nonMatched,
                new String [] {
                    "Company", "Identifier", "Order",  "Period", "Volume (MW)", "Price (USD/MW)"
                }
            ));     

}


public void clearingmarket(){
    
        int sup = 0;
        while(sup<BCOffers.size()-1){         
            boolean transactionSet = false;
            
            inerloops:
            for(int inf = sup+1; inf<BCOffers.size(); inf++){            
                if((BCOffers.get(sup).getGENCO_name() != BCOffers.get(inf).getGENCO_name()) && BCOffers.get(sup).getPeriod()== BCOffers.get(inf).getPeriod() && BCOffers.get(sup).getOrder()!= BCOffers.get(inf).getOrder()){
                
                    if(BCOffers.get(sup).getOrder() == "Sale" && BCOffers.get(sup).getPrice() <= BCOffers.get(inf).getPrice()){       //SALE                 
                        
                        double Volume = Math.min(BCOffers.get(sup).getVolume(),BCOffers.get(inf).getVolume());   
                        double Price = BCOffers.get(sup).getPrice();
                        double TransactionCost = Volume*Price;
                            
                        Transactions TT = new Transactions(BCOffers.get(inf).getID(),BCOffers.get(sup).getID(),Volume , Price, TransactionCost);
                        BCTransactions.add(TT);
                        transactionSet = true;        
                                

                
                    }else if(BCOffers.get(sup).getOrder() == "Purchase" && BCOffers.get(sup).getPrice() >= BCOffers.get(inf).getPrice()){// PURCHASE
                       
                        double Volume = Math.min(BCOffers.get(sup).getVolume(),BCOffers.get(inf).getVolume());
                        double Price = BCOffers.get(inf).getPrice();
                        double TransactionCost = Volume*Price;
                            
                        Transactions TT = new Transactions(BCOffers.get(sup).getID(),BCOffers.get(inf).getID(),Volume , Price, TransactionCost);
                        BCTransactions.add(TT);               
                        transactionSet = true;        
                    }else{
                        transactionSet = false;
                    }
            
                    
                    if (transactionSet){
                        double VolumeInf = BCOffers.get(inf).getVolume();
                        double VolumeSup = BCOffers.get(sup).getVolume();
            
                        if((VolumeInf-VolumeSup) == 0){ //Se volumes dos contratos se anulam
                            BCOffers.remove(inf);
                            BCOffers.remove(sup);
                        }else if((VolumeInf-VolumeSup) < 0){                
                            Contract BC = new Contract(BCOffers.get(sup).getGENCO_name(),BCOffers.get(sup).getID(),BCOffers.get(sup).getOrder(),BCOffers.get(sup).getPeriod(), VolumeSup-VolumeInf, BCOffers.get(sup).getPrice(),true);
                            BCOffers.add(BC);
                            BCOffers.remove(inf);             
                            BCOffers.remove(sup);
                        }else if(VolumeInf-VolumeSup > 0){
                            Contract BC = new Contract(BCOffers.get(inf).getGENCO_name(),BCOffers.get(inf).getID(),BCOffers.get(inf).getOrder(),BCOffers.get(inf).getPeriod(), VolumeInf-VolumeSup, BCOffers.get(inf).getPrice(),true);
                            BCOffers.add(BC);              
                            BCOffers.remove(inf);
                            BCOffers.remove(sup);    
                        }    
                        
                        sup = 0;
                        break inerloops;
                        
                    }                            

                }
    
            }
        sup++;
        }
        
        
        jTabbedPane1.setEnabled(true);
    
    }
    

public void addRandomBCProposals(){
    
    Contract bc1 = new Contract("Random","R1" ,"Purchase" ,"1:00-3:00h", 150, 55,false);
    
    
    Contract bc2 = new Contract("Random","R2" ,"Purchase" ,"3:00-7:00h", 80, 35,false);
    BCOffers.add(bc2);
    
    Contract bc3 = new Contract("Random","R3" ,"Purchase" ,"7:00-9:00h", 40, 65,false);
    BCOffers.add(bc3);
            
    Contract bc4 = new Contract("Random","R4" ,"Purchase" ,"9:00-18:00h", 300, 75,false);
    BCOffers.add(bc4);
    
    Contract bc5 = new Contract("Random","R5" ,"Purchase" ,"18:00-23:00h", 450, 90,false);
    BCOffers.add(bc5);
    }

}

